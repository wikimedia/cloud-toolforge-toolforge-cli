{
    "apiVersion": "tekton.dev/v1beta1",
    "kind": "PipelineRun",
    "metadata": {
        "annotations": {
            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"tekton.dev/v1beta1\",\"kind\":\"Pipeline\",\"metadata\":{\"annotations\":{\"tekton.dev/displayName\":\"Buildpacks\",\"tekton.dev/pipelines.minVersion\":\"0.17.0\",\"tekton.dev/tags\":\"image-build\"},\"labels\":{\"app.kubernetes.io/part-of\":\"toolforge-build-service\",\"app.kubernetes.io/version\":\"0.1\"},\"name\":\"buildpacks\",\"namespace\":\"image-build\"},\"spec\":{\"description\":\"The Buildpacks pipeline builds source from a Git repository into a container image and pushes it to a registry, using Cloud Native Buildpacks.\",\"params\":[{\"description\":\"The image on which builds will run (must include lifecycle and compatible buildpacks).\",\"name\":\"BUILDER_IMAGE\",\"type\":\"string\"},{\"description\":\"The name of where to store the app image.\",\"name\":\"APP_IMAGE\",\"type\":\"string\"},{\"description\":\"A git repo url where the source code resides.\",\"name\":\"SOURCE_URL\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"The branch, tag or SHA to checkout.\",\"name\":\"SOURCE_REFERENCE\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"A subpath within checked out source where the source to build is located.\",\"name\":\"SOURCE_SUBPATH\",\"type\":\"string\"},{\"default\":[],\"description\":\"Environment variables to set during _build-time_.\",\"name\":\"ENV_VARS\",\"type\":\"array\"},{\"default\":\"web\",\"description\":\"The default process type to set on the image.\",\"name\":\"PROCESS_TYPE\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"The name of the run image to use (defaults to image specified in builder).\",\"name\":\"RUN_IMAGE\",\"type\":\"string\"},{\"default\":\"\",\"description\":\"The name of the persistent cache image.\",\"name\":\"CACHE_IMAGE\",\"type\":\"string\"},{\"default\":\"1000\",\"description\":\"The user ID of the builder image user.\",\"name\":\"USER_ID\",\"type\":\"string\"},{\"default\":\"1000\",\"description\":\"The group ID of the builder image user.\",\"name\":\"GROUP_ID\",\"type\":\"string\"}],\"tasks\":[{\"name\":\"build-from-git\",\"params\":[{\"name\":\"url\",\"value\":\"$(params.SOURCE_URL)\"},{\"name\":\"revision\",\"value\":\"$(params.SOURCE_REFERENCE)\"},{\"name\":\"BUILDER_IMAGE\",\"value\":\"$(params.BUILDER_IMAGE)\"},{\"name\":\"APP_IMAGE\",\"value\":\"$(params.APP_IMAGE)\"},{\"name\":\"SOURCE_SUBPATH\",\"value\":\"$(params.SOURCE_SUBPATH)\"},{\"name\":\"ENV_VARS\",\"value\":[\"$(params.ENV_VARS)\"]},{\"name\":\"PROCESS_TYPE\",\"value\":\"$(params.PROCESS_TYPE)\"},{\"name\":\"RUN_IMAGE\",\"value\":\"$(params.RUN_IMAGE)\"},{\"name\":\"CACHE_IMAGE\",\"value\":\"$(params.CACHE_IMAGE)\"},{\"name\":\"USER_ID\",\"value\":\"$(params.USER_ID)\"},{\"name\":\"GROUP_ID\",\"value\":\"$(params.GROUP_ID)\"}],\"taskRef\":{\"name\":\"toolforge-buildpacks-phases\"},\"workspaces\":[{\"name\":\"source\",\"workspace\":\"source-ws\"},{\"name\":\"cache\",\"workspace\":\"cache-ws\"}]}],\"workspaces\":[{\"description\":\"Location where source is stored.\",\"name\":\"source-ws\"},{\"description\":\"Location where cache is stored if CACHE_IMAGE is not provided.\",\"name\":\"cache-ws\",\"optional\":true}]}}\n",
            "tekton.dev/displayName": "Buildpacks",
            "tekton.dev/pipelines.minVersion": "0.17.0",
            "tekton.dev/tags": "image-build"
        },
        "creationTimestamp": "2022-09-27T08:09:22Z",
        "generateName": "test-buildpacks-pipelinerun-",
        "generation": 1,
        "labels": {
            "app.kubernetes.io/part-of": "toolforge-build-service",
            "app.kubernetes.io/version": "0.1",
            "tekton.dev/pipeline": "buildpacks",
            "user": "test"
        },
        "name": "test-buildpacks-pipelinerun-7h7c7",
        "namespace": "image-build",
        "resourceVersion": "403039704",
        "uid": "014cf0a2-401b-49f7-b9ea-7720c2f1aff0"
    },
    "spec": {
        "params": [
            {
                "name": "BUILDER_IMAGE",
                "value": "docker-registry.tools.wmflabs.org/toolforge-buster0-builder"
            },
            {
                "name": "APP_IMAGE",
                "value": "harbor.toolsbeta.wmflabs.org/test/python:snap"
            },
            {
                "name": "SOURCE_URL",
                "value": "https://github.com/david-caro/wm-lol.git"
            },
            {
                "name": "USER_ID",
                "value": "61312"
            },
            {
                "name": "GROUP_ID",
                "value": "61312"
            },
            {
                "name": "SOURCE_REFERENCE",
                "value": "upstream_buildpacks"
            }
        ],
        "pipelineRef": {
            "name": "buildpacks"
        },
        "serviceAccountName": "buildpacks-service-account",
        "timeout": "1h0m0s",
        "workspaces": [
            {
                "emptyDir": {},
                "name": "source-ws"
            },
            {
                "emptyDir": {},
                "name": "cache-ws"
            }
        ]
    },
    "status": {
        "completionTime": "2022-09-27T08:09:58Z",
        "conditions": [
            {
                "lastTransitionTime": "2022-09-27T08:09:58Z",
                "message": "Tasks Completed: 1 (Failed: 1, Cancelled 0), Skipped: 0",
                "reason": "Failed",
                "status": "False",
                "type": "Succeeded"
            }
        ],
        "pipelineSpec": {
            "description": "The Buildpacks pipeline builds source from a Git repository into a container image and pushes it to a registry, using Cloud Native Buildpacks.",
            "params": [
                {
                    "description": "The image on which builds will run (must include lifecycle and compatible buildpacks).",
                    "name": "BUILDER_IMAGE",
                    "type": "string"
                },
                {
                    "description": "The name of where to store the app image.",
                    "name": "APP_IMAGE",
                    "type": "string"
                },
                {
                    "description": "A git repo url where the source code resides.",
                    "name": "SOURCE_URL",
                    "type": "string"
                },
                {
                    "default": "",
                    "description": "The branch, tag or SHA to checkout.",
                    "name": "SOURCE_REFERENCE",
                    "type": "string"
                },
                {
                    "default": "",
                    "description": "A subpath within checked out source where the source to build is located.",
                    "name": "SOURCE_SUBPATH",
                    "type": "string"
                },
                {
                    "default": [],
                    "description": "Environment variables to set during _build-time_.",
                    "name": "ENV_VARS",
                    "type": "array"
                },
                {
                    "default": "web",
                    "description": "The default process type to set on the image.",
                    "name": "PROCESS_TYPE",
                    "type": "string"
                },
                {
                    "default": "",
                    "description": "The name of the run image to use (defaults to image specified in builder).",
                    "name": "RUN_IMAGE",
                    "type": "string"
                },
                {
                    "default": "",
                    "description": "The name of the persistent cache image.",
                    "name": "CACHE_IMAGE",
                    "type": "string"
                },
                {
                    "default": "1000",
                    "description": "The user ID of the builder image user.",
                    "name": "USER_ID",
                    "type": "string"
                },
                {
                    "default": "1000",
                    "description": "The group ID of the builder image user.",
                    "name": "GROUP_ID",
                    "type": "string"
                }
            ],
            "tasks": [
                {
                    "name": "build-from-git",
                    "params": [
                        {
                            "name": "url",
                            "value": "$(params.SOURCE_URL)"
                        },
                        {
                            "name": "revision",
                            "value": "$(params.SOURCE_REFERENCE)"
                        },
                        {
                            "name": "BUILDER_IMAGE",
                            "value": "$(params.BUILDER_IMAGE)"
                        },
                        {
                            "name": "APP_IMAGE",
                            "value": "$(params.APP_IMAGE)"
                        },
                        {
                            "name": "SOURCE_SUBPATH",
                            "value": "$(params.SOURCE_SUBPATH)"
                        },
                        {
                            "name": "ENV_VARS",
                            "value": [
                                "$(params.ENV_VARS)"
                            ]
                        },
                        {
                            "name": "PROCESS_TYPE",
                            "value": "$(params.PROCESS_TYPE)"
                        },
                        {
                            "name": "RUN_IMAGE",
                            "value": "$(params.RUN_IMAGE)"
                        },
                        {
                            "name": "CACHE_IMAGE",
                            "value": "$(params.CACHE_IMAGE)"
                        },
                        {
                            "name": "USER_ID",
                            "value": "$(params.USER_ID)"
                        },
                        {
                            "name": "GROUP_ID",
                            "value": "$(params.GROUP_ID)"
                        }
                    ],
                    "taskRef": {
                        "kind": "Task",
                        "name": "toolforge-buildpacks-phases"
                    },
                    "workspaces": [
                        {
                            "name": "source",
                            "workspace": "source-ws"
                        },
                        {
                            "name": "cache",
                            "workspace": "cache-ws"
                        }
                    ]
                }
            ],
            "workspaces": [
                {
                    "description": "Location where source is stored.",
                    "name": "source-ws"
                },
                {
                    "description": "Location where cache is stored if CACHE_IMAGE is not provided.",
                    "name": "cache-ws",
                    "optional": true
                }
            ]
        },
        "startTime": "2022-09-27T08:09:22Z",
        "taskRuns": {
            "test-buildpacks-pipelinerun-7h7c7-build-from-git": {
                "pipelineTaskName": "build-from-git",
                "status": {
                    "completionTime": "2022-09-27T08:09:58Z",
                    "conditions": [
                        {
                            "lastTransitionTime": "2022-09-27T08:09:58Z",
                            "message": "The node was low on resource: memory. Container step-export was using 7804Ki, which exceeds its request of 0. Container step-results was using 6756Ki, which exceeds its request of 0. Container step-build was using 26352Ki, which exceeds its request of 0. ",
                            "reason": "Failed",
                            "status": "False",
                            "type": "Succeeded"
                        }
                    ],
                    "podName": "test-buildpacks-pipelinerun-7h7c7-build-from-git-pod",
                    "startTime": "2022-09-27T08:09:22Z",
                    "taskSpec": {
                        "description": "This is a large task that combines the steps of the upstream git clone and buildpacks-phases tasks. This is done to avoid requiring a PVC provisioner for the workspace and reduce privileges needed.\nThe Buildpacks-Phases task builds source into a container image and pushes it to a registry, using Cloud Native Buildpacks. This task separately calls the aspects of the Cloud Native Buildpacks lifecycle, to provide increased security via container isolation.\nThe git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.",
                        "params": [
                            {
                                "description": "Repository URL to clone from.",
                                "name": "url",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Revision to checkout. (branch, tag, sha, ref, etc...)",
                                "name": "revision",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Refspec to fetch before checking out revision.",
                                "name": "refspec",
                                "type": "string"
                            },
                            {
                                "default": "true",
                                "description": "Initialize and fetch git submodules.",
                                "name": "submodules",
                                "type": "string"
                            },
                            {
                                "default": "1",
                                "description": "Perform a shallow clone, fetching only the most recent N commits.",
                                "name": "depth",
                                "type": "string"
                            },
                            {
                                "default": "true",
                                "description": "Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.",
                                "name": "sslVerify",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Subdirectory inside the `source` Workspace to clone the repo into.",
                                "name": "subdirectory",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Define the directory patterns to match or exclude when performing a sparse checkout.",
                                "name": "sparseCheckoutDirectories",
                                "type": "string"
                            },
                            {
                                "default": "true",
                                "description": "Clean out the contents of the destination directory if it already exists before cloning.",
                                "name": "deleteExisting",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "HTTP proxy server for non-SSL requests.",
                                "name": "httpProxy",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "HTTPS proxy server for SSL requests.",
                                "name": "httpsProxy",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Opt out of proxying HTTP/HTTPS requests.",
                                "name": "noProxy",
                                "type": "string"
                            },
                            {
                                "default": "true",
                                "description": "Log the commands that are executed during `git-clone`'s operation.",
                                "name": "verbose",
                                "type": "string"
                            },
                            {
                                "default": "docker-registry.tools.wmflabs.org/toolforge-tektoncd-pipeline-cmd-git-init:v0.33.2",
                                "description": "The image providing the git-init binary that this Task runs.",
                                "name": "gitInitImage",
                                "type": "string"
                            },
                            {
                                "default": "/tekton/home",
                                "description": "Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden\nthe gitInitImage param with an image containing custom user configuration.\n",
                                "name": "userHome",
                                "type": "string"
                            },
                            {
                                "description": "The name of where to store the app image.",
                                "name": "APP_IMAGE",
                                "type": "string"
                            },
                            {
                                "description": "The image on which builds will run (must include lifecycle and compatible buildpacks).",
                                "name": "BUILDER_IMAGE",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "A subpath within the `source` input where the source to build is located.",
                                "name": "SOURCE_SUBPATH",
                                "type": "string"
                            },
                            {
                                "default": [],
                                "description": "Environment variables to set during _build-time_.",
                                "name": "ENV_VARS",
                                "type": "array"
                            },
                            {
                                "default": "web",
                                "description": "The default process type to set on the image.",
                                "name": "PROCESS_TYPE",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Reference to a run image to use.",
                                "name": "RUN_IMAGE",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "The name of the persistent app cache image (if no cache workspace is provided).",
                                "name": "CACHE_IMAGE",
                                "type": "string"
                            },
                            {
                                "default": "1000",
                                "description": "The user ID of the builder image user.",
                                "name": "USER_ID",
                                "type": "string"
                            },
                            {
                                "default": "1000",
                                "description": "The group ID of the builder image user.",
                                "name": "GROUP_ID",
                                "type": "string"
                            },
                            {
                                "default": "empty-dir",
                                "description": "The name of the platform directory.",
                                "name": "PLATFORM_DIR",
                                "type": "string"
                            },
                            {
                                "default": "docker-registry.tools.wmflabs.org/toolforge-buildpacksio-lifecycle:0.13.4",
                                "description": "The image to use when executing sensitive phases.",
                                "name": "LIFECYCLE_IMAGE",
                                "type": "string"
                            },
                            {
                                "default": "/tekton/home",
                                "description": "Absolute path to the user's home directory.",
                                "name": "USER_HOME",
                                "type": "string"
                            }
                        ],
                        "results": [
                            {
                                "description": "The digest of the built `APP_IMAGE`.",
                                "name": "APP_IMAGE_DIGEST"
                            }
                        ],
                        "stepTemplate": {
                            "env": [
                                {
                                    "name": "CNB_PLATFORM_API",
                                    "value": "0.4"
                                },
                                {
                                    "name": "HOME",
                                    "value": "$(params.USER_HOME)"
                                }
                            ],
                            "name": "",
                            "resources": {}
                        },
                        "steps": [
                            {
                                "env": [
                                    {
                                        "name": "HOME",
                                        "value": "$(params.userHome)"
                                    },
                                    {
                                        "name": "PARAM_URL",
                                        "value": "$(params.url)"
                                    },
                                    {
                                        "name": "PARAM_REVISION",
                                        "value": "$(params.revision)"
                                    },
                                    {
                                        "name": "PARAM_REFSPEC",
                                        "value": "$(params.refspec)"
                                    },
                                    {
                                        "name": "PARAM_SUBMODULES",
                                        "value": "$(params.submodules)"
                                    },
                                    {
                                        "name": "PARAM_DEPTH",
                                        "value": "$(params.depth)"
                                    },
                                    {
                                        "name": "PARAM_SSL_VERIFY",
                                        "value": "$(params.sslVerify)"
                                    },
                                    {
                                        "name": "PARAM_SUBDIRECTORY",
                                        "value": "$(params.subdirectory)"
                                    },
                                    {
                                        "name": "PARAM_DELETE_EXISTING",
                                        "value": "$(params.deleteExisting)"
                                    },
                                    {
                                        "name": "PARAM_HTTP_PROXY",
                                        "value": "$(params.httpProxy)"
                                    },
                                    {
                                        "name": "PARAM_HTTPS_PROXY",
                                        "value": "$(params.httpsProxy)"
                                    },
                                    {
                                        "name": "PARAM_NO_PROXY",
                                        "value": "$(params.noProxy)"
                                    },
                                    {
                                        "name": "PARAM_VERBOSE",
                                        "value": "$(params.verbose)"
                                    },
                                    {
                                        "name": "PARAM_SPARSE_CHECKOUT_DIRECTORIES",
                                        "value": "$(params.sparseCheckoutDirectories)"
                                    },
                                    {
                                        "name": "PARAM_USER_HOME",
                                        "value": "$(params.userHome)"
                                    },
                                    {
                                        "name": "WORKSPACE_OUTPUT_PATH",
                                        "value": "$(workspaces.source.path)"
                                    },
                                    {
                                        "name": "WORKSPACE_SSH_DIRECTORY_BOUND",
                                        "value": "$(workspaces.ssh-directory.bound)"
                                    },
                                    {
                                        "name": "WORKSPACE_SSH_DIRECTORY_PATH",
                                        "value": "$(workspaces.ssh-directory.path)"
                                    },
                                    {
                                        "name": "WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND",
                                        "value": "$(workspaces.basic-auth.bound)"
                                    },
                                    {
                                        "name": "WORKSPACE_BASIC_AUTH_DIRECTORY_PATH",
                                        "value": "$(workspaces.basic-auth.path)"
                                    }
                                ],
                                "image": "$(params.gitInitImage)",
                                "name": "clone",
                                "resources": {},
                                "script": "#!/usr/bin/env sh\nset -eu\n\nif [ \"${PARAM_VERBOSE}\" = \"true\" ] ; then\n  set -x\nfi\n\nif [ \"${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials\" \"${PARAM_USER_HOME}/.git-credentials\"\n  cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig\" \"${PARAM_USER_HOME}/.gitconfig\"\n  chmod 400 \"${PARAM_USER_HOME}/.git-credentials\"\n  chmod 400 \"${PARAM_USER_HOME}/.gitconfig\"\nfi\n\nif [ \"${WORKSPACE_SSH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  cp -R \"${WORKSPACE_SSH_DIRECTORY_PATH}\" \"${PARAM_USER_HOME}\"/.ssh\n  chmod 700 \"${PARAM_USER_HOME}\"/.ssh\n  chmod -R 400 \"${PARAM_USER_HOME}\"/.ssh/*\nfi\n\nCHECKOUT_DIR=\"${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}\"\n\ncleandir() {\n  # Delete any existing contents of the repo directory if it exists.\n  #\n  # We don't just \"rm -rf ${CHECKOUT_DIR}\" because ${CHECKOUT_DIR} might be \"/\"\n  # or the root of a mounted volume.\n  if [ -d \"${CHECKOUT_DIR}\" ] ; then\n    # Delete non-hidden files and directories\n    rm -rf \"${CHECKOUT_DIR:?}\"/*\n    # Delete files and directories starting with . but excluding ..\n    rm -rf \"${CHECKOUT_DIR}\"/.[!.]*\n    # Delete files and directories starting with .. plus any other character\n    rm -rf \"${CHECKOUT_DIR}\"/..?*\n  fi\n}\n\nif [ \"${PARAM_DELETE_EXISTING}\" = \"true\" ] ; then\n  cleandir\nfi\n\ntest -z \"${PARAM_HTTP_PROXY}\" || export HTTP_PROXY=\"${PARAM_HTTP_PROXY}\"\ntest -z \"${PARAM_HTTPS_PROXY}\" || export HTTPS_PROXY=\"${PARAM_HTTPS_PROXY}\"\ntest -z \"${PARAM_NO_PROXY}\" || export NO_PROXY=\"${PARAM_NO_PROXY}\"\n\n/ko-app/git-init \\\n  -url=\"${PARAM_URL}\" \\\n  -revision=\"${PARAM_REVISION}\" \\\n  -refspec=\"${PARAM_REFSPEC}\" \\\n  -path=\"${CHECKOUT_DIR}\" \\\n  -sslVerify=\"${PARAM_SSL_VERIFY}\" \\\n  -submodules=\"${PARAM_SUBMODULES}\" \\\n  -depth=\"${PARAM_DEPTH}\" \\\n  -sparseCheckoutDirectories=\"${PARAM_SPARSE_CHECKOUT_DIRECTORIES}\"\ncd \"${CHECKOUT_DIR}\"\nRESULT_SHA=\"$(git rev-parse HEAD)\"\nEXIT_CODE=\"$?\"\nif [ \"${EXIT_CODE}\" != 0 ] ; then\n  exit \"${EXIT_CODE}\"\nfi\n"
                            },
                            {
                                "args": [
                                    "--env-vars",
                                    "$(params.ENV_VARS[*])"
                                ],
                                "image": "docker-registry.tools.wmflabs.org/toolforge-library-bash:5.1.4",
                                "name": "prepare",
                                "resources": {},
                                "script": "#!/usr/bin/env bash\nset -e\n\nif [[ \"$(workspaces.cache.bound)\" == \"true\" ]]; then\n  echo \"\u003e Setting permissions on '$(workspaces.cache.path)'...\"\n  chown -R \"$(params.USER_ID):$(params.GROUP_ID)\" \"$(workspaces.cache.path)\"\nfi\n\nfor path in \"/tekton/home\" \"/layers\" \"$(workspaces.source.path)\"; do\n  echo \"\u003e Setting permissions on '$path'...\"\n  chown -R \"$(params.USER_ID):$(params.GROUP_ID)\" \"$path\"\ndone\n\necho \"\u003e Parsing additional configuration...\"\nparsing_flag=\"\"\nenvs=()\nfor arg in \"$@\"; do\n    if [[ \"$arg\" == \"--env-vars\" ]]; then\n        echo \"-\u003e Parsing env variables...\"\n        parsing_flag=\"env-vars\"\n    elif [[ \"$parsing_flag\" == \"env-vars\" ]]; then\n        envs+=(\"$arg\")\n    fi\ndone\n\necho \"\u003e Processing any environment variables...\"\nENV_DIR=\"/platform/env\"\n\necho \"--\u003e Creating 'env' directory: $ENV_DIR\"\nmkdir -p \"$ENV_DIR\"\n\nfor env in \"${envs[@]}\"; do\n    IFS='=' read -r key value string \u003c\u003c\u003c \"$env\"\n    if [[ \"$key\" != \"\" \u0026\u0026 \"$value\" != \"\" ]]; then\n        path=\"${ENV_DIR}/${key}\"\n        echo \"--\u003e Writing ${path}...\"\n        echo -n \"$value\" \u003e \"$path\"\n    fi\ndone\n",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    },
                                    {
                                        "mountPath": "/platform",
                                        "name": "$(params.PLATFORM_DIR)"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-c",
                                    "cp /cnb/stack.toml /layers/\n"
                                ],
                                "command": [
                                    "/bin/sh"
                                ],
                                "image": "$(params.BUILDER_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "copy-stack-toml",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)",
                                    "-group=/layers/group.toml",
                                    "-plan=/layers/plan.toml"
                                ],
                                "command": [
                                    "/cnb/lifecycle/detector"
                                ],
                                "image": "$(params.BUILDER_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "detect",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    },
                                    {
                                        "mountPath": "/platform",
                                        "name": "$(params.PLATFORM_DIR)"
                                    },
                                    {
                                        "mountPath": "/tekton/home",
                                        "name": "empty-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-layers=/layers",
                                    "-group=/layers/group.toml",
                                    "-cache-dir=$(workspaces.cache.path)",
                                    "-cache-image=$(params.CACHE_IMAGE)",
                                    "-uid=$(params.USER_ID)",
                                    "-gid=$(params.GROUP_ID)",
                                    "$(params.APP_IMAGE)"
                                ],
                                "command": [
                                    "/cnb/lifecycle/analyzer"
                                ],
                                "image": "$(params.LIFECYCLE_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "analyze",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-group=/layers/group.toml",
                                    "-layers=/layers",
                                    "-cache-dir=$(workspaces.cache.path)",
                                    "-cache-image=$(params.CACHE_IMAGE)",
                                    "-uid=$(params.USER_ID)",
                                    "-gid=$(params.GROUP_ID)"
                                ],
                                "command": [
                                    "/cnb/lifecycle/restorer"
                                ],
                                "image": "$(params.LIFECYCLE_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "restore",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)",
                                    "-layers=/layers",
                                    "-group=/layers/group.toml",
                                    "-plan=/layers/plan.toml"
                                ],
                                "command": [
                                    "/cnb/lifecycle/builder"
                                ],
                                "image": "$(params.BUILDER_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "build",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    },
                                    {
                                        "mountPath": "/platform",
                                        "name": "$(params.PLATFORM_DIR)"
                                    },
                                    {
                                        "mountPath": "/tekton/home",
                                        "name": "empty-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)",
                                    "-layers=/layers",
                                    "-group=/layers/group.toml",
                                    "-cache-dir=$(workspaces.cache.path)",
                                    "-cache-image=$(params.CACHE_IMAGE)",
                                    "-report=/layers/report.toml",
                                    "-process-type=$(params.PROCESS_TYPE)",
                                    "-uid=$(params.USER_ID)",
                                    "-gid=$(params.GROUP_ID)",
                                    "-stack=/layers/stack.toml",
                                    "-run-image=$(params.RUN_IMAGE)",
                                    "$(params.APP_IMAGE)"
                                ],
                                "command": [
                                    "/cnb/lifecycle/exporter"
                                ],
                                "image": "$(params.LIFECYCLE_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "export",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    }
                                ]
                            },
                            {
                                "image": "docker-registry.tools.wmflabs.org/toolforge-library-bash:5.1.4",
                                "name": "results",
                                "resources": {},
                                "script": "#!/usr/bin/env bash\nset -e\ncat /layers/report.toml | grep \"digest\" | cut -d'\"' -f2 | cut -d'\"' -f2 | tr -d '\\n' | tee $(results.APP_IMAGE_DIGEST.path)\n",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "empty-dir"
                            },
                            {
                                "emptyDir": {},
                                "name": "layers-dir"
                            }
                        ],
                        "workspaces": [
                            {
                                "description": "Directory where application source is located.",
                                "name": "source"
                            },
                            {
                                "description": "Directory where cache is stored (when no cache image is provided).",
                                "name": "cache",
                                "optional": true
                            },
                            {
                                "description": "A .ssh directory with private key, known_hosts, config, etc. Copied to\nthe user's home before git commands are executed. Used to authenticate\nwith the git remote when performing the clone. Binding a Secret to this\nWorkspace is strongly recommended over other volume types.\n",
                                "name": "ssh-directory",
                                "optional": true
                            },
                            {
                                "description": "A Workspace containing a .gitconfig and .git-credentials file. These\nwill be copied to the user's home before any git commands are run. Any\nother files in this Workspace are ignored. It is strongly recommended\nto use ssh-directory over basic-auth whenever possible and to bind a\nSecret to this Workspace over other volume types.\n",
                                "name": "basic-auth",
                                "optional": true
                            }
                        ]
                    }
                }
            }
        }
    }
}
