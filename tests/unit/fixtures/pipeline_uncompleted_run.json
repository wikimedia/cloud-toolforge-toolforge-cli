{
    "apiVersion": "tekton.dev/v1beta1",
    "kind": "PipelineRun",
    "metadata": {
        "creationTimestamp": "2023-05-05T01:56:52Z",
        "generateName": "minikube-user-buildpacks-pipelinerun-",
        "generation": 1,
        "labels": {
            "user": "minikube-user"
        },
        "managedFields": [
            {
                "apiVersion": "tekton.dev/v1beta1",
                "fieldsType": "FieldsV1",
                "fieldsV1": {
                    "f:metadata": {
                        "f:generateName": {},
                        "f:labels": {
                            ".": {},
                            "f:user": {}
                        }
                    },
                    "f:spec": {
                        ".": {},
                        "f:params": {},
                        "f:pipelineRef": {
                            ".": {},
                            "f:name": {}
                        },
                        "f:serviceAccountName": {},
                        "f:workspaces": {}
                    }
                },
                "manager": "python-requests",
                "operation": "Update",
                "time": "2023-05-05T01:56:52Z"
            },
            {
                "apiVersion": "tekton.dev/v1beta1",
                "fieldsType": "FieldsV1",
                "fieldsV1": {
                    "f:status": {
                        ".": {},
                        "f:conditions": {},
                        "f:pipelineSpec": {
                            ".": {},
                            "f:description": {},
                            "f:params": {},
                            "f:tasks": {},
                            "f:workspaces": {}
                        },
                        "f:startTime": {},
                        "f:taskRuns": {
                            ".": {},
                            "f:minikube-user-buildpacks-pipelinerun-5txnc-build-from-git": {
                                ".": {},
                                "f:pipelineTaskName": {},
                                "f:status": {
                                    ".": {},
                                    "f:conditions": {},
                                    "f:podName": {},
                                    "f:startTime": {},
                                    "f:steps": {},
                                    "f:taskSpec": {
                                        ".": {},
                                        "f:description": {},
                                        "f:params": {},
                                        "f:results": {},
                                        "f:stepTemplate": {
                                            ".": {},
                                            "f:env": {},
                                            "f:name": {},
                                            "f:resources": {}
                                        },
                                        "f:steps": {},
                                        "f:volumes": {},
                                        "f:workspaces": {}
                                    }
                                }
                            }
                        }
                    }
                },
                "manager": "controller",
                "operation": "Update",
                "time": "2023-05-05T01:56:54Z"
            }
        ],
        "name": "minikube-user-buildpacks-pipelinerun-5txnc",
        "namespace": "image-build",
        "resourceVersion": "355835",
        "uid": "0972c00f-60c9-4408-9ab4-6427a6ff08f6"
    },
    "spec": {
        "params": [
            {
                "name": "BUILDER_IMAGE",
                "value": "toolsbeta-harbor.wmcloud.org/toolforge/heroku-builder-classic:22"
            },
            {
                "name": "APP_IMAGE",
                "value": "192.168.188.129/tool-minikube-user/tool-raymond:latest"
            },
            {
                "name": "SOURCE_URL",
                "value": "https://github.com/david-caro/wm-lol"
            }
        ],
        "pipelineRef": {
            "name": "buildpacks"
        },
        "serviceAccountName": "buildpacks-service-account",
        "timeout": "1h0m0s",
        "workspaces": [
            {
                "emptyDir": {},
                "name": "source-ws"
            },
            {
                "emptyDir": {},
                "name": "cache-ws"
            }
        ]
    },
    "status": {
        "conditions": [
            {
                "lastTransitionTime": "2023-05-05T01:56:53Z",
                "message": "Tasks Completed: 0 (Failed: 0, Cancelled 0), Incomplete: 1, Skipped: 0",
                "reason": "Running",
                "status": "Unknown",
                "type": "Succeeded"
            }
        ],
        "pipelineSpec": {
            "description": "The Buildpacks pipeline builds source from a Git repository into a container image and pushes it to a registry, using Cloud Native Buildpacks.",
            "params": [
                {
                    "description": "The image on which builds will run (must include lifecycle and compatible buildpacks).",
                    "name": "BUILDER_IMAGE",
                    "type": "string"
                },
                {
                    "description": "The name of where to store the app image.",
                    "name": "APP_IMAGE",
                    "type": "string"
                },
                {
                    "description": "A git repo url where the source code resides.",
                    "name": "SOURCE_URL",
                    "type": "string"
                },
                {
                    "default": "",
                    "description": "The branch, tag or SHA to checkout.",
                    "name": "SOURCE_REFERENCE",
                    "type": "string"
                },
                {
                    "default": "",
                    "description": "A subpath within checked out source where the source to build is located.",
                    "name": "SOURCE_SUBPATH",
                    "type": "string"
                },
                {
                    "default": [],
                    "description": "Environment variables to set during _build-time_.",
                    "name": "ENV_VARS",
                    "type": "array"
                },
                {
                    "default": "web",
                    "description": "The default process type to set on the image.",
                    "name": "PROCESS_TYPE",
                    "type": "string"
                },
                {
                    "default": "",
                    "description": "The name of the run image to use (defaults to image specified in builder).",
                    "name": "RUN_IMAGE",
                    "type": "string"
                },
                {
                    "default": "",
                    "description": "The name of the persistent cache image.",
                    "name": "CACHE_IMAGE",
                    "type": "string"
                },
                {
                    "default": "1000",
                    "description": "The user ID of the builder image user.",
                    "name": "USER_ID",
                    "type": "string"
                },
                {
                    "default": "1000",
                    "description": "The group ID of the builder image user.",
                    "name": "GROUP_ID",
                    "type": "string"
                }
            ],
            "tasks": [
                {
                    "name": "build-from-git",
                    "params": [
                        {
                            "name": "url",
                            "value": "$(params.SOURCE_URL)"
                        },
                        {
                            "name": "revision",
                            "value": "$(params.SOURCE_REFERENCE)"
                        },
                        {
                            "name": "BUILDER_IMAGE",
                            "value": "$(params.BUILDER_IMAGE)"
                        },
                        {
                            "name": "APP_IMAGE",
                            "value": "$(params.APP_IMAGE)"
                        },
                        {
                            "name": "SOURCE_SUBPATH",
                            "value": "$(params.SOURCE_SUBPATH)"
                        },
                        {
                            "name": "ENV_VARS",
                            "value": [
                                "$(params.ENV_VARS)"
                            ]
                        },
                        {
                            "name": "PROCESS_TYPE",
                            "value": "$(params.PROCESS_TYPE)"
                        },
                        {
                            "name": "RUN_IMAGE",
                            "value": "$(params.RUN_IMAGE)"
                        },
                        {
                            "name": "CACHE_IMAGE",
                            "value": "$(params.CACHE_IMAGE)"
                        },
                        {
                            "name": "USER_ID",
                            "value": "$(params.USER_ID)"
                        },
                        {
                            "name": "GROUP_ID",
                            "value": "$(params.GROUP_ID)"
                        }
                    ],
                    "taskRef": {
                        "name": "toolforge-buildpacks-phases"
                    },
                    "workspaces": [
                        {
                            "name": "source",
                            "workspace": "source-ws"
                        },
                        {
                            "name": "cache",
                            "workspace": "cache-ws"
                        }
                    ]
                }
            ],
            "workspaces": [
                {
                    "description": "Location where source is stored.",
                    "name": "source-ws"
                },
                {
                    "description": "Location where cache is stored if CACHE_IMAGE is not provided.",
                    "name": "cache-ws",
                    "optional": true
                }
            ]
        },
        "startTime": "2023-05-05T01:56:53Z",
        "taskRuns": {
            "minikube-user-buildpacks-pipelinerun-5txnc-build-from-git": {
                "pipelineTaskName": "build-from-git",
                "status": {
                    "conditions": [
                        {
                            "lastTransitionTime": "2023-05-05T01:57:24Z",
                            "message": "Not all Steps in the Task have finished executing",
                            "reason": "Running",
                            "status": "Unknown",
                            "type": "Succeeded"
                        }
                    ],
                    "podName": "minikube-user-buildpacks-pipelinerun-5txnc-build-from-git-pod",
                    "startTime": "2023-05-05T01:56:53Z",
                    "steps": [
                        {
                            "container": "step-clone",
                            "imageID": "docker-pullable://docker-registry.tools.wmflabs.org/toolforge-tektoncd-pipeline-cmd-git-init@sha256:bbb7ec459178f708644694417f9426e6c599b5aaab1b01e4c3863e8294de6758",
                            "name": "clone",
                            "terminated": {
                                "containerID": "docker://c7728a84d603adbb06d6f39dfd14b07abb7204e4cf0600b70623068557da8b71",
                                "exitCode": 0,
                                "finishedAt": "2023-05-05T01:57:29Z",
                                "message": "[{\"key\":\"commit\",\"value\":\"fdbb6847fde83b42c80f35bb146670b4726928d4\",\"resourceRef\":{}},{\"key\":\"url\",\"value\":\"https://github.com/david-caro/wm-lol\",\"resourceRef\":{}}]",
                                "reason": "Completed",
                                "startedAt": "2023-05-05T01:57:27Z"
                            }
                        },
                        {
                            "container": "step-prepare",
                            "imageID": "docker-pullable://docker-registry.tools.wmflabs.org/toolforge-library-bash@sha256:d6fbca4fa8195c4b6a23f8599b022d3d4287b52622b6ebae3291f0f074edd1c2",
                            "name": "prepare",
                            "terminated": {
                                "containerID": "docker://34aa5fbf8a94c4f770506042f913d4c25e5987d07a5d63453eb688336d0e9415",
                                "exitCode": 0,
                                "finishedAt": "2023-05-05T01:57:29Z",
                                "reason": "Completed",
                                "startedAt": "2023-05-05T01:57:29Z"
                            }
                        },
                        {
                            "container": "step-copy-stack-toml",
                            "imageID": "docker-pullable://toolsbeta-harbor.wmcloud.org/toolforge/heroku-builder-classic@sha256:8765048ba4e91ef3edb22e073eab0f22350f767e67197ab98df11d5776b67990",
                            "name": "copy-stack-toml",
                            "terminated": {
                                "containerID": "docker://7f3917bfcf5e0da56ee7a28fc5eaf14c41da26ff497d415d6d27ce739b687c5f",
                                "exitCode": 0,
                                "finishedAt": "2023-05-05T01:57:30Z",
                                "reason": "Completed",
                                "startedAt": "2023-05-05T01:57:30Z"
                            }
                        },
                        {
                            "container": "step-detect",
                            "imageID": "docker-pullable://toolsbeta-harbor.wmcloud.org/toolforge/heroku-builder-classic@sha256:8765048ba4e91ef3edb22e073eab0f22350f767e67197ab98df11d5776b67990",
                            "name": "detect",
                            "terminated": {
                                "containerID": "docker://770f8de8a867bf43c5452b0d80f6839ce813d4202c5239f9cd1e9881718384e0",
                                "exitCode": 0,
                                "finishedAt": "2023-05-05T01:57:30Z",
                                "reason": "Completed",
                                "startedAt": "2023-05-05T01:57:30Z"
                            }
                        },
                        {
                            "container": "step-analyze",
                            "imageID": "docker-pullable://docker-registry.tools.wmflabs.org/toolforge-buildpacksio-lifecycle@sha256:30b062f09c258c2ab3c92152f5c8c0821ab7732e385a4013dc4c5cfc678de146",
                            "name": "analyze",
                            "terminated": {
                                "containerID": "docker://213eabeceace2a0cf63c4c8def4f8936b05dda001adaf17fa8f20c224b75381b",
                                "exitCode": 0,
                                "finishedAt": "2023-05-05T01:57:37Z",
                                "reason": "Completed",
                                "startedAt": "2023-05-05T01:57:30Z"
                            }
                        },
                        {
                            "container": "step-restore",
                            "imageID": "docker-pullable://docker-registry.tools.wmflabs.org/toolforge-buildpacksio-lifecycle@sha256:30b062f09c258c2ab3c92152f5c8c0821ab7732e385a4013dc4c5cfc678de146",
                            "name": "restore",
                            "terminated": {
                                "containerID": "docker://7f4b6a26dd08de627e9a938164b7f454d495626df39255587a869de98410f75a",
                                "exitCode": 0,
                                "finishedAt": "2023-05-05T01:57:37Z",
                                "reason": "Completed",
                                "startedAt": "2023-05-05T01:57:37Z"
                            }
                        },
                        {
                            "container": "step-build",
                            "imageID": "docker-pullable://toolsbeta-harbor.wmcloud.org/toolforge/heroku-builder-classic@sha256:8765048ba4e91ef3edb22e073eab0f22350f767e67197ab98df11d5776b67990",
                            "name": "build",
                            "running": {
                                "startedAt": "2023-05-05T01:57:21Z"
                            }
                        },
                        {
                            "container": "step-export",
                            "imageID": "docker-pullable://docker-registry.tools.wmflabs.org/toolforge-buildpacksio-lifecycle@sha256:30b062f09c258c2ab3c92152f5c8c0821ab7732e385a4013dc4c5cfc678de146",
                            "name": "export",
                            "running": {
                                "startedAt": "2023-05-05T01:57:24Z"
                            }
                        },
                        {
                            "container": "step-results",
                            "imageID": "docker-pullable://docker-registry.tools.wmflabs.org/toolforge-library-bash@sha256:d6fbca4fa8195c4b6a23f8599b022d3d4287b52622b6ebae3291f0f074edd1c2",
                            "name": "results",
                            "running": {
                                "startedAt": "2023-05-05T01:57:24Z"
                            }
                        }
                    ],
                    "taskSpec": {
                        "description": "This is a large task that combines the steps of the upstream git clone and buildpacks-phases tasks. This is done to avoid requiring a PVC provisioner for the workspace and reduce privileges needed.\nThe Buildpacks-Phases task builds source into a container image and pushes it to a registry, using Cloud Native Buildpacks. This task separately calls the aspects of the Cloud Native Buildpacks lifecycle, to provide increased security via container isolation.\nThe git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.",
                        "params": [
                            {
                                "description": "Repository URL to clone from.",
                                "name": "url",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Revision to checkout. (branch, tag, sha, ref, etc...)",
                                "name": "revision",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Refspec to fetch before checking out revision.",
                                "name": "refspec",
                                "type": "string"
                            },
                            {
                                "default": "true",
                                "description": "Initialize and fetch git submodules.",
                                "name": "submodules",
                                "type": "string"
                            },
                            {
                                "default": "1",
                                "description": "Perform a shallow clone, fetching only the most recent N commits.",
                                "name": "depth",
                                "type": "string"
                            },
                            {
                                "default": "true",
                                "description": "Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.",
                                "name": "sslVerify",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Add the given git CA certificate authority.",
                                "name": "crtFileName",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Subdirectory inside the `source` Workspace to clone the repo into.",
                                "name": "subdirectory",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Define the directory patterns to match or exclude when performing a sparse checkout.",
                                "name": "sparseCheckoutDirectories",
                                "type": "string"
                            },
                            {
                                "default": "true",
                                "description": "Clean out the contents of the destination directory if it already exists before cloning.",
                                "name": "deleteExisting",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "HTTP proxy server for non-SSL requests.",
                                "name": "httpProxy",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "HTTPS proxy server for SSL requests.",
                                "name": "httpsProxy",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Opt out of proxying HTTP/HTTPS requests.",
                                "name": "noProxy",
                                "type": "string"
                            },
                            {
                                "default": "true",
                                "description": "Log the commands that are executed during `git-clone`'s operation.",
                                "name": "verbose",
                                "type": "string"
                            },
                            {
                                "default": "docker-registry.tools.wmflabs.org/toolforge-tektoncd-pipeline-cmd-git-init:v0.33.2",
                                "description": "The image providing the git-init binary that this Task runs.",
                                "name": "gitInitImage",
                                "type": "string"
                            },
                            {
                                "default": "/tekton/home",
                                "description": "Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden\nthe gitInitImage param with an image containing custom user configuration.\n",
                                "name": "userHome",
                                "type": "string"
                            },
                            {
                                "description": "The name of where to store the app image.",
                                "name": "APP_IMAGE",
                                "type": "string"
                            },
                            {
                                "description": "The image on which builds will run (must include lifecycle and compatible buildpacks).",
                                "name": "BUILDER_IMAGE",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "A subpath within the `source` input where the source to build is located.",
                                "name": "SOURCE_SUBPATH",
                                "type": "string"
                            },
                            {
                                "default": [],
                                "description": "Environment variables to set during _build-time_.",
                                "name": "ENV_VARS",
                                "type": "array"
                            },
                            {
                                "default": "web",
                                "description": "The default process type to set on the image.",
                                "name": "PROCESS_TYPE",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "Reference to a run image to use.",
                                "name": "RUN_IMAGE",
                                "type": "string"
                            },
                            {
                                "default": "",
                                "description": "The name of the persistent app cache image (if no cache workspace is provided).",
                                "name": "CACHE_IMAGE",
                                "type": "string"
                            },
                            {
                                "default": "1000",
                                "description": "The user ID of the builder image user.",
                                "name": "USER_ID",
                                "type": "string"
                            },
                            {
                                "default": "false",
                                "description": "Do not write layer metadata or restore cached layers.",
                                "name": "SKIP_RESTORE",
                                "type": "string"
                            },
                            {
                                "default": "1000",
                                "description": "The group ID of the builder image user.",
                                "name": "GROUP_ID",
                                "type": "string"
                            },
                            {
                                "default": "empty-dir",
                                "description": "The name of the platform directory.",
                                "name": "PLATFORM_DIR",
                                "type": "string"
                            },
                            {
                                "default": "docker-registry.tools.wmflabs.org/toolforge-buildpacksio-lifecycle:0.16.0",
                                "description": "The image to use when executing sensitive phases.",
                                "name": "LIFECYCLE_IMAGE",
                                "type": "string"
                            },
                            {
                                "default": "/tekton/home",
                                "description": "Absolute path to the user's home directory.",
                                "name": "USER_HOME",
                                "type": "string"
                            }
                        ],
                        "results": [
                            {
                                "description": "The digest of the built `APP_IMAGE`.",
                                "name": "APP_IMAGE_DIGEST"
                            },
                            {
                                "description": "The URL of the built `APP_IMAGE`.",
                                "name": "APP_IMAGE_URL"
                            }
                        ],
                        "stepTemplate": {
                            "env": [
                                {
                                    "name": "CNB_PLATFORM_API",
                                    "value": "0.9"
                                },
                                {
                                    "name": "HOME",
                                    "value": "$(params.USER_HOME)"
                                }
                            ],
                            "name": "",
                            "resources": {}
                        },
                        "steps": [
                            {
                                "env": [
                                    {
                                        "name": "HOME",
                                        "value": "$(params.userHome)"
                                    },
                                    {
                                        "name": "PARAM_URL",
                                        "value": "$(params.url)"
                                    },
                                    {
                                        "name": "PARAM_REVISION",
                                        "value": "$(params.revision)"
                                    },
                                    {
                                        "name": "PARAM_REFSPEC",
                                        "value": "$(params.refspec)"
                                    },
                                    {
                                        "name": "PARAM_SUBMODULES",
                                        "value": "$(params.submodules)"
                                    },
                                    {
                                        "name": "PARAM_DEPTH",
                                        "value": "$(params.depth)"
                                    },
                                    {
                                        "name": "PARAM_SSL_VERIFY",
                                        "value": "$(params.sslVerify)"
                                    },
                                    {
                                        "name": "PARAM_CRT_FILENAME",
                                        "value": "$(params.crtFileName)"
                                    },
                                    {
                                        "name": "PARAM_SUBDIRECTORY",
                                        "value": "$(params.subdirectory)"
                                    },
                                    {
                                        "name": "PARAM_DELETE_EXISTING",
                                        "value": "$(params.deleteExisting)"
                                    },
                                    {
                                        "name": "PARAM_HTTP_PROXY",
                                        "value": "$(params.httpProxy)"
                                    },
                                    {
                                        "name": "PARAM_HTTPS_PROXY",
                                        "value": "$(params.httpsProxy)"
                                    },
                                    {
                                        "name": "PARAM_NO_PROXY",
                                        "value": "$(params.noProxy)"
                                    },
                                    {
                                        "name": "PARAM_VERBOSE",
                                        "value": "$(params.verbose)"
                                    },
                                    {
                                        "name": "PARAM_SPARSE_CHECKOUT_DIRECTORIES",
                                        "value": "$(params.sparseCheckoutDirectories)"
                                    },
                                    {
                                        "name": "PARAM_USER_HOME",
                                        "value": "$(params.userHome)"
                                    },
                                    {
                                        "name": "WORKSPACE_OUTPUT_PATH",
                                        "value": "$(workspaces.source.path)"
                                    },
                                    {
                                        "name": "WORKSPACE_SSH_DIRECTORY_BOUND",
                                        "value": "$(workspaces.ssh-directory.bound)"
                                    },
                                    {
                                        "name": "WORKSPACE_SSH_DIRECTORY_PATH",
                                        "value": "$(workspaces.ssh-directory.path)"
                                    },
                                    {
                                        "name": "WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND",
                                        "value": "$(workspaces.basic-auth.bound)"
                                    },
                                    {
                                        "name": "WORKSPACE_BASIC_AUTH_DIRECTORY_PATH",
                                        "value": "$(workspaces.basic-auth.path)"
                                    },
                                    {
                                        "name": "WORKSPACE_SSL_CA_DIRECTORY_BOUND",
                                        "value": "$(workspaces.ssl-ca-directory.bound)"
                                    },
                                    {
                                        "name": "WORKSPACE_SSL_CA_DIRECTORY_PATH",
                                        "value": "$(workspaces.ssl-ca-directory.path)"
                                    }
                                ],
                                "image": "$(params.gitInitImage)",
                                "name": "clone",
                                "resources": {},
                                "script": "#!/usr/bin/env sh\nset -eu\nif [ \"${PARAM_VERBOSE}\" = \"true\" ] ; then\n  set -x\nfi\nif [ \"${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials\" \"${PARAM_USER_HOME}/.git-credentials\"\n  cp \"${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig\" \"${PARAM_USER_HOME}/.gitconfig\"\n  chmod 400 \"${PARAM_USER_HOME}/.git-credentials\"\n  chmod 400 \"${PARAM_USER_HOME}/.gitconfig\"\nfi\nif [ \"${WORKSPACE_SSH_DIRECTORY_BOUND}\" = \"true\" ] ; then\n  cp -R \"${WORKSPACE_SSH_DIRECTORY_PATH}\" \"${PARAM_USER_HOME}\"/.ssh\n  chmod 700 \"${PARAM_USER_HOME}\"/.ssh\n  chmod -R 400 \"${PARAM_USER_HOME}\"/.ssh/*\nfi\nif [ \"${WORKSPACE_SSL_CA_DIRECTORY_BOUND}\" = \"true\" ] ; then\n   export GIT_SSL_CAPATH=\"${WORKSPACE_SSL_CA_DIRECTORY_PATH}\"\n   if [ \"${PARAM_CRT_FILENAME}\" != \"\" ] ; then\n      export GIT_SSL_CAINFO=\"${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}\"\n   fi\nfi\nCHECKOUT_DIR=\"${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}\"\ncleandir() {\n  # Delete any existing contents of the repo directory if it exists.\n  #\n  # We don't just \"rm -rf ${CHECKOUT_DIR}\" because ${CHECKOUT_DIR} might be \"/\"\n  # or the root of a mounted volume.\n  if [ -d \"${CHECKOUT_DIR}\" ] ; then\n    # Delete non-hidden files and directories\n    rm -rf \"${CHECKOUT_DIR:?}\"/*\n    # Delete files and directories starting with . but excluding ..\n    rm -rf \"${CHECKOUT_DIR}\"/.[!.]*\n    # Delete files and directories starting with .. plus any other character\n    rm -rf \"${CHECKOUT_DIR}\"/..?*\n  fi\n}\nif [ \"${PARAM_DELETE_EXISTING}\" = \"true\" ] ; then\n  cleandir\nfi\ntest -z \"${PARAM_HTTP_PROXY}\" || export HTTP_PROXY=\"${PARAM_HTTP_PROXY}\"\ntest -z \"${PARAM_HTTPS_PROXY}\" || export HTTPS_PROXY=\"${PARAM_HTTPS_PROXY}\"\ntest -z \"${PARAM_NO_PROXY}\" || export NO_PROXY=\"${PARAM_NO_PROXY}\"\n/ko-app/git-init \\\n  -url=\"${PARAM_URL}\" \\\n  -revision=\"${PARAM_REVISION}\" \\\n  -refspec=\"${PARAM_REFSPEC}\" \\\n  -path=\"${CHECKOUT_DIR}\" \\\n  -sslVerify=\"${PARAM_SSL_VERIFY}\" \\\n  -submodules=\"${PARAM_SUBMODULES}\" \\\n  -depth=\"${PARAM_DEPTH}\" \\\n  -sparseCheckoutDirectories=\"${PARAM_SPARSE_CHECKOUT_DIRECTORIES}\"\ncd \"${CHECKOUT_DIR}\"\nRESULT_SHA=\"$(git rev-parse HEAD)\"\nEXIT_CODE=\"$?\"\nif [ \"${EXIT_CODE}\" != 0 ] ; then\n  exit \"${EXIT_CODE}\"\nfi\n"
                            },
                            {
                                "args": [
                                    "--env-vars",
                                    "$(params.ENV_VARS[*])"
                                ],
                                "image": "docker-registry.tools.wmflabs.org/toolforge-library-bash:5.1.4",
                                "name": "prepare",
                                "resources": {},
                                "script": "#!/usr/bin/env bash\nset -e\n\nif [[ \"$(workspaces.cache.bound)\" == \"true\" ]]; then\n  echo \"> Setting permissions on '$(workspaces.cache.path)'...\"\n  chown -R \"$(params.USER_ID):$(params.GROUP_ID)\" \"$(workspaces.cache.path)\"\nfi\n\nfor path in \"/tekton/home\" \"/layers\" \"$(workspaces.source.path)\"; do\n  echo \"> Setting permissions on '$path'...\"\n  chown -R \"$(params.USER_ID):$(params.GROUP_ID)\" \"$path\"\n\n  if [[ \"$path\" == \"$(workspaces.source.path)\" ]]; then\n      chmod 775 \"$(workspaces.source.path)\"\n  fi\ndone\n\necho \"> Parsing additional configuration...\"\nparsing_flag=\"\"\nenvs=()\nfor arg in \"$@\"; do\n    if [[ \"$arg\" == \"--env-vars\" ]]; then\n        echo \"-> Parsing env variables...\"\n        parsing_flag=\"env-vars\"\n    elif [[ \"$parsing_flag\" == \"env-vars\" ]]; then\n        envs+=(\"$arg\")\n    fi\ndone\n\necho \"> Processing any environment variables...\"\nENV_DIR=\"/platform/env\"\n\necho \"--> Creating 'env' directory: $ENV_DIR\"\nmkdir -p \"$ENV_DIR\"\n\nfor env in \"${envs[@]}\"; do\n    IFS='=' read -r key value string <<< \"$env\"\n    if [[ \"$key\" != \"\" && \"$value\" != \"\" ]]; then\n        path=\"${ENV_DIR}/${key}\"\n        echo \"--> Writing ${path}...\"\n        echo -n \"$value\" > \"$path\"\n    fi\ndone\n",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    },
                                    {
                                        "mountPath": "/platform",
                                        "name": "$(params.PLATFORM_DIR)"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-c",
                                    "cp /cnb/stack.toml /layers/\n"
                                ],
                                "command": [
                                    "/bin/sh"
                                ],
                                "image": "$(params.BUILDER_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "copy-stack-toml",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)",
                                    "-group=/layers/group.toml",
                                    "-plan=/layers/plan.toml"
                                ],
                                "command": [
                                    "/cnb/lifecycle/detector"
                                ],
                                "image": "$(params.BUILDER_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "detect",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    },
                                    {
                                        "mountPath": "/platform",
                                        "name": "$(params.PLATFORM_DIR)"
                                    },
                                    {
                                        "mountPath": "/tekton/home",
                                        "name": "empty-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-layers=/layers",
                                    "-stack=/layers/stack.toml",
                                    "-cache-image=$(params.CACHE_IMAGE)",
                                    "-uid=$(params.USER_ID)",
                                    "-gid=$(params.GROUP_ID)",
                                    "$(params.APP_IMAGE)"
                                ],
                                "command": [
                                    "/cnb/lifecycle/analyzer"
                                ],
                                "image": "$(params.LIFECYCLE_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "analyze",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-group=/layers/group.toml",
                                    "-layers=/layers",
                                    "-cache-dir=$(workspaces.cache.path)",
                                    "-cache-image=$(params.CACHE_IMAGE)",
                                    "-uid=$(params.USER_ID)",
                                    "-gid=$(params.GROUP_ID)"
                                ],
                                "command": [
                                    "/cnb/lifecycle/restorer"
                                ],
                                "image": "$(params.LIFECYCLE_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "restore",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)",
                                    "-layers=/layers",
                                    "-group=/layers/group.toml",
                                    "-plan=/layers/plan.toml"
                                ],
                                "command": [
                                    "/cnb/lifecycle/builder"
                                ],
                                "image": "$(params.BUILDER_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "build",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    },
                                    {
                                        "mountPath": "/platform",
                                        "name": "$(params.PLATFORM_DIR)"
                                    },
                                    {
                                        "mountPath": "/tekton/home",
                                        "name": "empty-dir"
                                    }
                                ]
                            },
                            {
                                "args": [
                                    "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)",
                                    "-layers=/layers",
                                    "-group=/layers/group.toml",
                                    "-cache-dir=$(workspaces.cache.path)",
                                    "-cache-image=$(params.CACHE_IMAGE)",
                                    "-report=/layers/report.toml",
                                    "-process-type=$(params.PROCESS_TYPE)",
                                    "-uid=$(params.USER_ID)",
                                    "-gid=$(params.GROUP_ID)",
                                    "-stack=/layers/stack.toml",
                                    "-run-image=$(params.RUN_IMAGE)",
                                    "$(params.APP_IMAGE)"
                                ],
                                "command": [
                                    "/cnb/lifecycle/exporter"
                                ],
                                "image": "$(params.LIFECYCLE_IMAGE)",
                                "imagePullPolicy": "Always",
                                "name": "export",
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    },
                                    {
                                        "mountPath": "/platform",
                                        "name": "$(params.PLATFORM_DIR)"
                                    }
                                ]
                            },
                            {
                                "image": "docker-registry.tools.wmflabs.org/toolforge-library-bash:5.1.4",
                                "name": "results",
                                "resources": {},
                                "script": "#!/usr/bin/env bash\nset -e\ngrep \"digest\" /layers/report.toml | cut -d'\"' -f2 | cut -d'\"' -f2 | tr -d '\\n' > \"$(results.APP_IMAGE_DIGEST.path)\"\necho \"$(params.APP_IMAGE)\" > \"$(results.APP_IMAGE_URL.path)\"\necho \"Built image $(cat $(results.APP_IMAGE_URL.path))@$(cat $(results.APP_IMAGE_DIGEST.path))\"\n",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/layers",
                                        "name": "layers-dir"
                                    }
                                ]
                            }
                        ],
                        "volumes": [
                            {
                                "emptyDir": {},
                                "name": "empty-dir"
                            },
                            {
                                "emptyDir": {},
                                "name": "layers-dir"
                            }
                        ],
                        "workspaces": [
                            {
                                "description": "Directory where application source is located.",
                                "mountPath": "/workspace",
                                "name": "source"
                            },
                            {
                                "description": "Directory where cache is stored (when no cache image is provided).",
                                "mountPath": "/cache",
                                "name": "cache",
                                "optional": true
                            },
                            {
                                "description": "An optional workspace that allows providing a .docker/config.json file for Buildpacks lifecycle binary to access the container registry. The file should be placed at the root of the Workspace with name config.json.",
                                "name": "dockerconfig",
                                "optional": true
                            },
                            {
                                "description": "A .ssh directory with private key, known_hosts, config, etc. Copied to\nthe user's home before git commands are executed. Used to authenticate\nwith the git remote when performing the clone. Binding a Secret to this\nWorkspace is strongly recommended over other volume types.\n",
                                "name": "ssh-directory",
                                "optional": true
                            },
                            {
                                "description": "A Workspace containing a .gitconfig and .git-credentials file. These\nwill be copied to the user's home before any git commands are run. Any\nother files in this Workspace are ignored. It is strongly recommended\nto use ssh-directory over basic-auth whenever possible and to bind a\nSecret to this Workspace over other volume types.\n",
                                "name": "basic-auth",
                                "optional": true
                            }
                        ]
                    }
                }
            }
        }
    }
}
